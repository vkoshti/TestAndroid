package com.universal.learningconnection.timeline;

import android.content.Context;
import android.graphics.Color;
import android.support.annotation.NonNull;
import android.support.annotation.Nullable;
import android.support.v7.widget.LinearLayoutManager;
import android.support.v7.widget.RecyclerView;
import android.util.AttributeSet;
import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.ImageView;
import android.widget.TextView;

import com.universal.learningconnection.R;
import com.universal.learningconnection.timeline.model.ItemStatus;
import com.universal.learningconnection.timeline.model.TrackItem;

import java.util.ArrayList;

public class TimeLineView extends RecyclerView {
    private TimeLineViewAdapter adapter;
    private LinearLayoutManager linearLayoutManager;
    private RecyclerView recyclerView;
    public TimeLineView(Context context) {
        super(context);
        init(null,0);
    }

    public TimeLineView(Context context, @Nullable AttributeSet attrs) {
        super(context, attrs);
        init(attrs,0);
    }

    public TimeLineView(Context context, @Nullable AttributeSet attrs, int defStyleAttr) {
        super(context, attrs, defStyleAttr);
        init(attrs,defStyleAttr);
    }

    private void init(@Nullable AttributeSet attrs,int defStyle)
    {
        adapter = new TimeLineViewAdapter(getContext());
        this.setLayoutManager(getLayoutManager(VERTICAL));
        this.setAdapter(adapter);
    }


    private LinearLayoutManager getLayoutManager(int orientation)
    {
        linearLayoutManager = new LinearLayoutManager(getContext());
        linearLayoutManager.setOrientation(orientation);
        linearLayoutManager.setReverseLayout(true);
        return linearLayoutManager;

    }

    public void replaceAll(ArrayList<TrackItem> dataSet)
    {
        this.adapter.replaceAll(dataSet);
    }

    public void addItem(TrackItem trackItem)
    {
        if(trackItem!=null)
        {
            this.adapter.addItem(trackItem);
        }
    }

    public void addAll(ArrayList<TrackItem> dataSet)
    {
        if(dataSet!=null)
            this.adapter.addAll(dataSet);
    }

    public void setDashGap(int dashGap)
    {
        this.adapter.setDashGap(dashGap);
    }

    public void setDashColorRes(int colorRes)
    {
        this.adapter.setDashColor(getContext().getResources().getColor(colorRes));
    }

    public void setDashColor(int color)
    {
        this.adapter.setDashColor(color);
    }

    public void setDashLength(int dashLength)
    {
        this.adapter.setDashLength(dashLength);
    }

    public void setDashThickness(int dashThickness)
    {
        this.adapter.setDashThickness(dashThickness);
    }

}


    class TimeLineViewAdapter extends RecyclerView.Adapter<TimeLineViewAdapter.TimeLineViewHolder> {
    private ArrayList<TrackItem> items;
    private Context context;
    private int dashColor = Color.GRAY,dashGap = 5, dashLength = 5 , dashThickness = 3;
    TimeLineViewAdapter(Context context)
    {
        this.context = context;
        this.items = new ArrayList<>();
    }

    TimeLineViewAdapter(Context context,ArrayList<TrackItem> trackItems)
    {
        this.context = context;
        this.items = trackItems;
    }

    @NonNull
    @Override
    public TimeLineViewHolder onCreateViewHolder(@NonNull ViewGroup parent, int viewType) {
        TimeLineViewHolder viewHolder =  new TimeLineViewHolder(LayoutInflater.from(this.context).inflate(R.layout.item_task_layout,parent,false));
        viewHolder.lineView.setDashGap(dashGap);
        viewHolder.lineView.setDashThickness(dashThickness);
        viewHolder.lineView.setDashLength(dashLength);
        viewHolder.lineView.setDashColor(dashColor);
        return viewHolder;
    }

    @Override
    public void onBindViewHolder(@NonNull TimeLineViewHolder holder, int position) {
        TrackItem item = items.get(position);
        holder.title.setText(item.getTitle());
        holder.subtitle.setText(item.getSubTitle());
        if(position == getItemCount()-1)
            holder.lineView.setVisibility(View.INVISIBLE);
        else
            holder.lineView.setVisibility(View.VISIBLE);
        if(item.getItemStatus() == ItemStatus.DONE)
            holder.imageView.setImageResource(R.drawable.ic_green_tick);
        else
            holder.imageView.setImageResource(R.drawable.ic_vector_line);
    }

    @Override
    public int getItemCount() {
        return items.size();
    }

    public void replaceAll(ArrayList<TrackItem> dataSet)
    {
        this.items = dataSet;
        notifyDataSetChanged();
    }

    public void addItem(TrackItem trackItem)
    {
        this.items.add(trackItem);
        notifyDataSetChanged();
    }

    public void addAll(ArrayList<TrackItem> dataSet)
    {
        this.items.addAll(dataSet);
        notifyDataSetChanged();
    }

    public TrackItem getItem(int index)
    {
        return this.items.get(index);
    }

    public ArrayList<TrackItem> getItems() {
        return items;
    }

    public void setDashColor(int color)
    {
        dashColor = color;
        notifyDataSetChanged();
    }

    public void setDashGap(int dashGap)
    {
        this.dashGap = dashGap;
        notifyDataSetChanged();
    }

    public void setDashLength(int dashLength)
    {
        this.dashLength = dashLength;
        notifyDataSetChanged();
    }

    public void setDashThickness(int dashThickness)
    {
        this.dashThickness = dashThickness;
        notifyDataSetChanged();
    }

    class TimeLineViewHolder extends RecyclerView.ViewHolder {
            DottedLineView lineView;
            TextView title,subtitle;
            ImageView imageView;
            TimeLineViewHolder(View itemView) {
                super(itemView);
                lineView = itemView.findViewById(R.id.line_view);
                title = itemView.findViewById(R.id.item_title);
                subtitle = itemView.findViewById(R.id.item_subtitle);
                imageView = itemView.findViewById(R.id.item_status);
            }
        }
}


















package com.universal.learningconnection.timeline;

import android.content.Context;
import android.content.res.TypedArray;
import android.graphics.Canvas;
import android.graphics.DashPathEffect;
import android.graphics.Paint;
import android.util.AttributeSet;
import android.view.View;

import com.universal.learningconnection.R;

public class DottedLineView extends View {
    static public int ORIENTATION_HORIZONTAL = 0;
    static public int ORIENTATION_VERTICAL = 1;
    private Paint mPaint;
    private int orientation;
    private int color;
    private int dashGap, dashLength , dashThickness;

    public DottedLineView(Context context)
    {
        super(context);
        init(null,0);
    }


    public DottedLineView(Context context, AttributeSet attrs) {
        super(context, attrs);
        init(attrs,0);

    }

    public DottedLineView(Context context,AttributeSet attrs,int defStyle)
    {
        super(context,attrs,defStyle);
        init(attrs,defStyle);
    }

    private void init(AttributeSet attrs,int defStyle)
    {
        TypedArray a = getContext().obtainStyledAttributes(attrs, R.styleable.DottedLineView, 0, 0);

        try {
            dashGap = a.getDimensionPixelSize(R.styleable.DottedLineView_dashGap, 5);
            dashLength = a.getDimensionPixelSize(R.styleable.DottedLineView_dashLength, 5);
            dashThickness = a.getDimensionPixelSize(R.styleable.DottedLineView_dashThickness, 3);
            color = a.getColor(R.styleable.DottedLineView_color, 0xff000000);
            orientation = a.getInt(R.styleable.DottedLineView_orientation, ORIENTATION_HORIZONTAL);
        } finally {
            a.recycle();
        }

        mPaint = new Paint();
        mPaint.setAntiAlias(true);
        invalidatePaint();
    }

    private void invalidatePaint()
    {
        mPaint.setColor(color);
        mPaint.setStyle(Paint.Style.STROKE);
        mPaint.setStrokeWidth(dashThickness);
        mPaint.setPathEffect(new DashPathEffect(new float[] { dashLength, dashGap, }, 0));
        invalidate();
    }


    @Override
    protected void onDraw(Canvas canvas) {
        if (orientation == ORIENTATION_HORIZONTAL) {
            float center = getHeight() * .5f;
            canvas.drawLine(0, center, getWidth(), center, mPaint);
        } else {
            float center = getWidth() * .5f;
            canvas.drawLine(center, 0, center, getHeight(), mPaint);
        }
    }


    public void setDashColor(int dashColor)
    {
        this.color = dashColor;
        invalidatePaint();
    }

    public void setDashLength(int dashLength)
    {
        this.dashLength = dashLength;
        invalidatePaint();
    }

    public void setDashGap(int dashGap)
    {
        this.dashGap = dashGap;
        invalidatePaint();
    }

    public void setDashThickness(int dashThickness)
    {
        this.dashThickness = dashThickness;
        invalidatePaint();
    }

}

